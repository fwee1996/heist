using System.Runtime.CompilerServices;

class Program
{
    static void Main(string[] args)
    {

// Phase One: Print the message "Plan Your Heist!". 
Console.WriteLine("Plan Your Heist!");

// Phase Six: At the beginning of the program, prompt the user to enter the difficulty level of the bank.
   Console.WriteLine("Enter difficulty:");
   int bankDifficulty=int.Parse(Console.ReadLine());

    // Phase Two: Create a way to store several team members.
    List <Member> team = new List<Member> ();


// Phase Six: At the end of the program, display a report showing the number of successful runs and the number of failed runs.
List<int> successTrials= new List<int>();
 List<int> failedTrials= new List<int>();


    // Phase Two: Collect several team members' information:

    // Phase One: Create a way to store a single team member. A team member will have a name, a skill Level and a courage factor. The skill Level will be a positive integer and the courage factor will be a decimal between 0.0 and 2.0.
    // Phase One: Prompt the user to enter a team member's name and save that name. The same for skill level and courage factor
    // Phase One: Display the team member's information.
    while(true){
    Console.WriteLine("Enter name:");

    string? name= Console.ReadLine();

    // Phase Two: Stop collecting team members when a blank name is entered : while loop and if statement with break
    if (string.IsNullOrEmpty(name))
                    break;

    Console.WriteLine("Enter skill level (positive integer):");
    int skillL= int.Parse(Console.ReadLine());

    Console.WriteLine("Enter courage factor (0.0 to 2.0):");
    double cF= double.Parse(Console.ReadLine());

    Console.WriteLine($"{name} {skillL} {cF}");

    Member member = new Member (name, skillL, cF);
    team.Add(member);

    }

// Phase Two: Display number of members of the team.
    Console.WriteLine($"Member count is {team.Count()}");

// Phase Two: Display each team member's information.
    foreach (Member teamMember in team){
        Console.WriteLine($"{teamMember.Name} {teamMember.SkillLevel} {teamMember.CourageFactor}");
   
    }

// Phase Five: After the user enters the team information, prompt them to enter the number of trial runs the program should perform.
Console.WriteLine("How many trial runs?");
int trialRuns=int.Parse(Console.ReadLine());

// Phase Three: Stop displaying each team member's information.
// Phase Three: Store a value for the bank's difficulty level. Set this value to 100.
//int bankDifficulty= 100;
// At Phase Six we assign user input difficulty

// Phase Three: Sum the skill levels of the team. Save that number.
    int SkillSum=team.Sum(member=>member.SkillLevel);

int i=1;
// Phase Five: Loop through the difficulty / skill level calculation based on the user-entered number of trial runs. Choose a new luck value each time.
while ( i<=trialRuns){
// Phase Four: Create a random number between -10 and 10 for the heist's luck value.
int randomNumForLuck= new Random().Next(-10,10);

// Phase Four: Add this number to the bank's difficulty level.
int CombinedLuckAndBankDifficulty= bankDifficulty + randomNumForLuck;

    i++;

    // Phase Four: Before displaying the success or failure message, display a report that shows: 
    // The team's combined skill level
    // The bank's difficulty level
Console.WriteLine($"Your combined skill level is {SkillSum}");
Console.WriteLine($"The bank's difficulty level is {CombinedLuckAndBankDifficulty}");


// Phase Three: Compare the number with the bank's difficulty level. If the team's skill level is greater than or equal to the bank's difficulty level, Display a success message, otherwise display a failure message.
if (SkillSum>=CombinedLuckAndBankDifficulty){
    Console.WriteLine("Rob the bank!!");
    successTrials.Add(i);
}
else{
    Console.WriteLine("You need to rethink this heist.");
    failedTrials.Add(i);
}


};

// Phase Six: At the end of the program, display a report showing the number of successful runs and the number of failed runs.
//Move the final report outside of the loop that runs the trials. This way, the report is displayed only once after all the trials have been completed.
Console.WriteLine($"Successful runs: {successTrials.Count()}");
Console.WriteLine($"Failed runs: {failedTrials.Count()}");

  }
}







//// Make a Member class:
     class Member{
        public string? Name {get; set;}
        public int SkillLevel {get; set;} //+ int
        public double CourageFactor {get; set;} //decimal between 0.0 and 2.0
    
        public Member(string name, int skillL, double cF){
        Name=name;
        SkillLevel = skillL;
        CourageFactor = cF;
        }



    }

